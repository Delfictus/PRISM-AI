# Multi-stage Dockerfile for PRISM-AI with GPU acceleration
# Provides CUDA support and optimized builds

# Stage 1: CUDA base with development tools
FROM nvidia/cuda:12.3.1-devel-ubuntu22.04 AS cuda-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    git \
    wget \
    curl \
    pkg-config \
    libssl-dev \
    python3 \
    python3-pip \
    python3-dev \
    clang \
    llvm \
    && rm -rf /var/lib/apt/lists/*

# Verify CUDA installation
RUN nvcc --version && nvidia-smi || echo "GPU not available in build"

# Stage 2: Rust builder with CUDA
FROM cuda-base AS rust-builder

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Create working directory
WORKDIR /build

# Copy source files
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY build.rs ./

# Copy CUDA kernels
COPY src/kernels ./src/kernels

# Build CUDA kernels first
RUN cd src/kernels && \
    nvcc -ptx -arch=sm_86 -O3 --use_fast_math double_double.cu -o double_double.ptx && \
    nvcc -ptx -arch=sm_86 -O3 --use_fast_math quantum_evolution.cu -o quantum_evolution.ptx && \
    nvcc -c -arch=sm_86 -O3 --use_fast_math double_double.cu -o double_double.o && \
    nvcc -c -arch=sm_86 -O3 --use_fast_math quantum_evolution.cu -o quantum_evolution.o

# Build Rust project with GPU features
RUN cargo build --release --features cuda

# Create PTX directory for runtime loading
RUN mkdir -p /build/target/ptx && \
    cp src/kernels/*.ptx /build/target/ptx/

# Stage 3: MLIR/LLVM builder
FROM cuda-base AS mlir-builder

WORKDIR /mlir

# Download and build LLVM/MLIR
RUN git clone --depth 1 --branch llvmorg-17.0.6 https://github.com/llvm/llvm-project.git && \
    cd llvm-project && \
    mkdir build && cd build && \
    cmake -G Ninja ../llvm \
        -DLLVM_ENABLE_PROJECTS="mlir;clang" \
        -DLLVM_TARGETS_TO_BUILD="NVPTX;X86" \
        -DLLVM_ENABLE_ASSERTIONS=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DMLIR_ENABLE_CUDA_RUNNER=ON \
        -DMLIR_ENABLE_CUDA_CONVERSIONS=ON && \
    ninja -j$(nproc) && \
    ninja install

# Stage 4: Python validation environment
FROM cuda-base AS python-env

WORKDIR /validation

# Install Python packages for validation
RUN pip3 install --no-cache-dir \
    numpy==1.24.3 \
    scipy==1.11.4 \
    qutip==4.7.3 \
    matplotlib==3.7.2 \
    jupyter==1.0.0 \
    pandas==2.0.3

# Copy validation scripts
COPY validation ./validation
COPY tests ./tests

# Stage 5: Final runtime image
FROM nvidia/cuda:12.3.1-runtime-ubuntu22.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    ca-certificates \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd -m -s /bin/bash prism

# Copy from builder stages
COPY --from=rust-builder /build/target/release/prism-ai /usr/local/bin/prism-ai
COPY --from=rust-builder /build/target/ptx /usr/local/share/prism-ai/ptx
COPY --from=mlir-builder /usr/local /usr/local
COPY --from=python-env /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages

# Copy configuration and examples
WORKDIR /home/prism
COPY --chown=prism:prism examples ./examples
COPY --chown=prism:prism GPU_ACCELERATION_COMPLETE.md ./
COPY --chown=prism:prism SPRINT1_COMPLETE.md ./

# Set environment
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
ENV PRISM_PTX_PATH=/usr/local/share/prism-ai/ptx
ENV RUST_LOG=info

# Switch to app user
USER prism

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD prism-ai --version || exit 1

# Expose ports for potential web interface
EXPOSE 8080 8443

# Default command
CMD ["prism-ai", "--help"]

# Labels
LABEL org.opencontainers.image.title="PRISM-AI GPU"
LABEL org.opencontainers.image.description="GPU-accelerated quantum and neuromorphic computing platform"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.authors="PRISM-AI Team"
LABEL org.opencontainers.image.source="https://github.com/Delfictus/PRISM-AI"
LABEL org.opencontainers.image.licenses="MIT"
LABEL ai.prism.cuda="12.3"
LABEL ai.prism.precision="10^-32"
LABEL ai.prism.speedup="100x"